// Machine generated by peg-sharp 0.3.427.0 from D:\Test projects\SqlCleanup\SqlCleanup\Parser\sql1.peg.
using SqlCleanup.Parser;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using System.Security.Permissions;

[Serializable]
internal sealed class ParserException : Exception
{
	public ParserException()
	{
	}
	
	public ParserException(string message) : base(message)
	{
	}
	
	public ParserException(int line, int col, string file, string message) : base(string.Format("{0} at line {1} col {2}{3}", message, line, col, file != null ? (" in " + file) : "."))
	{
	}
	
	public ParserException(int line, int col, string file, string format, params object[] args) : this(line, col, file, string.Format(format, args))
	{
	}
	
	public ParserException(int line, int col, string file, string message, Exception inner) : base(string.Format("{0} at line {1} col {2}{3}", message, line, col, file != null ? (" in " + file) : "."), inner)
	{
	}
	
	[SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)]
	private ParserException(SerializationInfo info, StreamingContext context) : base(info, context)
	{
	}
}

// Thread safe if Parser instances are not shared across threads.
internal sealed partial class sql1
{
	public sql1()
	{
		m_nonterminals.Add("AggregateIdentifiers", new ParseMethod[]{this.DoParseAggregateIdentifiersRule});
		m_nonterminals.Add("Aggregate", new ParseMethod[]{this.DoParseAggregateRule});
		m_nonterminals.Add("ReservedWords", new ParseMethod[]{this.DoParseReservedWordsRule});
		m_nonterminals.Add("Space", new ParseMethod[]{this.DoParseSpaceRule});
		m_nonterminals.Add("S", new ParseMethod[]{this.DoParseSRule});
		m_nonterminals.Add("Digit", new ParseMethod[]{this.DoParseDigitRule});
		m_nonterminals.Add("Number", new ParseMethod[]{this.DoParseNumber1Rule, this.DoParseNumber2Rule});
		m_nonterminals.Add("Text", new ParseMethod[]{this.DoParseTextRule});
		m_nonterminals.Add("Litteral", new ParseMethod[]{this.DoParseLitteralRule});
		m_nonterminals.Add("Letter", new ParseMethod[]{this.DoParseLetterRule});
		m_nonterminals.Add("Identifier", new ParseMethod[]{this.DoParseIdentifier1Rule, this.DoParseIdentifier2Rule});
		m_nonterminals.Add("ObjectReference", new ParseMethod[]{this.DoParseObjectReference1Rule, this.DoParseObjectReference2Rule, this.DoParseObjectReference3Rule, this.DoParseObjectReference4Rule});
		m_nonterminals.Add("WildcardReference", new ParseMethod[]{this.DoParseWildcardReference1Rule, this.DoParseWildcardReference2Rule});
		m_nonterminals.Add("SubSelect", new ParseMethod[]{this.DoParseSubSelectRule});
		m_nonterminals.Add("Expression", new ParseMethod[]{this.DoParseExpression1Rule, this.DoParseExpression2Rule, this.DoParseExpression3Rule, this.DoParseExpression4Rule, this.DoParseExpression5Rule, this.DoParseExpression6Rule, this.DoParseExpression7Rule, this.DoParseExpression8Rule});
		m_nonterminals.Add("SelectStatement", new ParseMethod[]{this.DoParseSelectStatement1Rule, this.DoParseSelectStatement2Rule, this.DoParseSelectStatement3Rule});
		m_nonterminals.Add("Select", new ParseMethod[]{this.DoParseSelectRule});
		OnCtorEpilog();
	}
	
	public Expression Parse(string input)
	{
		return DoParseFile(input, null);
	}
	
	// File is used for error reporting.
	public Expression Parse(string input, string file)
	{
		return DoParseFile(input, file);
	}
	
	// Will be string.Empty if everything was consumed.
	public string Unconsumed
	{
		get {return m_input.Substring(m_consumed, m_input.Length - m_consumed - 1);}
	}
	
	#region Non-Terminal Parse Methods
	// AggregateIdentifiers := 'sum' / 'max' / 'min' / 'count'
	private State DoParseAggregateIdentifiersRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "sum");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "max");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "min");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "count");});
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// Aggregate := AggregateIdentifiers S '(' S (WildcardReference / Expression) S ')'
	private State DoParseAggregateRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "AggregateIdentifiers");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "(");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoChoice(s, r,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "WildcardReference");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Expression");});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, ")");});
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// ReservedWords := ('sum' / 'max' / 'min' / 'count' / 'as' / 'left' / 'right' / 'table' / 'join' / 'select' / 'from' / 'where') ![_a-z0-9]
	private State DoParseReservedWordsRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoChoice(s, r,
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "sum");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "max");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "min");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "count");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "as");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "left");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "right");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "table");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "join");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "select");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "from");},
				delegate (State s2, List<Result> r2) {return DoParseLiteral(s2, r2, "where");});},
			delegate (State s, List<Result> r) {return DoNAssert(s, r,
				delegate (State s2, List<Result> r2) {return DoParseRange(s2, r2, false, "_", "az09", null, "[_a-z0-9]");});});
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// Space := [ \t\r\n]
	private State DoParseSpaceRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoParseRange(_state, results, false, " \t\r\n", string.Empty, null, "[ \t\r\n]");
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		else
		{
			string expected = null;
			expected = "whitespace";
			if (expected != null)
				_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
		}
		
		return _state;
	}
	
	// S := Space*
	private State DoParseSRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoRepetition(_state, results, 0, 2147483647,
			delegate (State s, List<Result> r) {return DoParse(s, r, "Space");});
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			string text = m_input.Substring(_start.Index, _state.Index - _start.Index);
			text = null;
			if (text != null)
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// Digit := [0-9]
	private State DoParseDigitRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoParseRange(_state, results, false, string.Empty, "09", null, "[0-9]");
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// Number := ('+' / '-')? Digit+
	private State DoParseNumber1Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 1,
				delegate (State s2, List<Result> r2) {return DoChoice(s2, r2,
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, "+");},
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, "-");});});},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 1, 2147483647,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Digit");});});
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			string text = m_input.Substring(_start.Index, _state.Index - _start.Index);
			value = new LitteralExpression(text, false);
			if (text != null)
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		else
		{
			string expected = null;
			expected = "Litteral";
			if (expected != null)
				_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
		}
		
		return _state;
	}
	
	// Number := ('+' / '-')? Digit+ '.' Digit+
	private State DoParseNumber2Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 1,
				delegate (State s2, List<Result> r2) {return DoChoice(s2, r2,
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, "+");},
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, "-");});});},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 1, 2147483647,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Digit");});},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, ".");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 1, 2147483647,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Digit");});});
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			string text = m_input.Substring(_start.Index, _state.Index - _start.Index);
			value = new LitteralExpression(text, false);
			if (text != null)
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		else
		{
			string expected = null;
			expected = "Litteral";
			if (expected != null)
				_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
		}
		
		return _state;
	}
	
	// Text := '\'' ![']* '\''
	private State DoParseTextRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "\'");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 2147483647,
				delegate (State s2, List<Result> r2) {return DoNAssert(s2, r2,
					delegate (State s3, List<Result> r3) {return DoParseRange(s3, r3, false, "'", string.Empty, null, "[']");});});},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "\'");});
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			string text = m_input.Substring(_start.Index, _state.Index - _start.Index);
			value = new LitteralExpression(text, true);
			if (text != null)
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		else
		{
			string expected = null;
			expected = "Litteral";
			if (expected != null)
				_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
		}
		
		return _state;
	}
	
	// Litteral := Number / Text
	private State DoParseLitteralRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoChoice(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "Number");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Text");});
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// Letter := [a-z]
	private State DoParseLetterRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoParseRange(_state, results, false, string.Empty, "az", null, "[a-z]");
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// Identifier := !ReservedWords Letter (Letter / Digit / '_')*
	private State DoParseIdentifier1Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoNAssert(s, r,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "ReservedWords");});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Letter");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 2147483647,
				delegate (State s2, List<Result> r2) {return DoChoice(s2, r2,
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "Letter");},
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "Digit");},
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, "_");});});});
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			string text = m_input.Substring(_start.Index, _state.Index - _start.Index);
			value = new IdentifierExpression(text);
			if (text != null)
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		else
		{
			string expected = null;
			expected = "Identifier";
			if (expected != null)
				_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
		}
		
		return _state;
	}
	
	// Identifier := '[' Letter (Letter / Digit / ' ' / '_')* ']'
	private State DoParseIdentifier2Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "[");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Letter");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 2147483647,
				delegate (State s2, List<Result> r2) {return DoChoice(s2, r2,
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "Letter");},
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "Digit");},
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, " ");},
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, "_");});});},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "]");});
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			string text = m_input.Substring(_start.Index, _state.Index - _start.Index);
			value = new IdentifierExpression(text);
			if (text != null)
				_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		else
		{
			string expected = null;
			expected = "Identifier";
			if (expected != null)
				_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
		}
		
		return _state;
	}
	
	// ObjectReference := Identifier '.' Identifier? '.' Identifier? '.' Identifier
	private State DoParseObjectReference1Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "Identifier");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, ".");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 1,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Identifier");});},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, ".");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 1,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Identifier");});},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, ".");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Identifier");});
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			value = DoCreateObjectReference(results);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		else
		{
			string expected = null;
			expected = "ObjectReference";
			if (expected != null)
				_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
		}
		
		return _state;
	}
	
	// ObjectReference := Identifier '.' Identifier? '.' Identifier
	private State DoParseObjectReference2Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "Identifier");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, ".");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 1,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Identifier");});},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, ".");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Identifier");});
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			value = DoCreateObjectReference(results);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		else
		{
			string expected = null;
			expected = "ObjectReference";
			if (expected != null)
				_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
		}
		
		return _state;
	}
	
	// ObjectReference := Identifier '.' Identifier
	private State DoParseObjectReference3Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "Identifier");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, ".");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Identifier");});
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			value = DoCreateObjectReference(results);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		else
		{
			string expected = null;
			expected = "ObjectReference";
			if (expected != null)
				_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
		}
		
		return _state;
	}
	
	// ObjectReference := Identifier
	private State DoParseObjectReference4Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoParse(_state, results, "Identifier");
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			value = DoCreateObjectReference(results);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		else
		{
			string expected = null;
			expected = "ObjectReference";
			if (expected != null)
				_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
		}
		
		return _state;
	}
	
	// WildcardReference := '*'
	private State DoParseWildcardReference1Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoParseLiteral(_state, results, "*");
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// WildcardReference := Identifier '.*'
	private State DoParseWildcardReference2Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "Identifier");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, ".*");});
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// SubSelect := '(' S Select S ')'
	private State DoParseSubSelectRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "(");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Select");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, ")");});
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// Expression := Litteral
	private State DoParseExpression1Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoParse(_state, results, "Litteral");
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// Expression := Litteral S (('+' / '-' / '/' / '*') S (Aggregate / Litteral / ObjectReference / SubSelect))*
	private State DoParseExpression2Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "Litteral");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 2147483647,
				delegate (State s2, List<Result> r2) {return DoSequence(s2, r2,
					delegate (State s3, List<Result> r3) {return DoChoice(s3, r3,
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, "+");},
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, "-");},
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, "/");},
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, "*");});},
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "S");},
					delegate (State s3, List<Result> r3) {return DoChoice(s3, r3,
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "Aggregate");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "Litteral");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "ObjectReference");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "SubSelect");});});});});
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// Expression := Aggregate
	private State DoParseExpression3Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoParse(_state, results, "Aggregate");
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// Expression := Aggregate S (('+' / '-' / '/' / '*') S (Aggregate / Litteral / ObjectReference / SubSelect))*
	private State DoParseExpression4Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "Aggregate");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 2147483647,
				delegate (State s2, List<Result> r2) {return DoSequence(s2, r2,
					delegate (State s3, List<Result> r3) {return DoChoice(s3, r3,
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, "+");},
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, "-");},
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, "/");},
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, "*");});},
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "S");},
					delegate (State s3, List<Result> r3) {return DoChoice(s3, r3,
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "Aggregate");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "Litteral");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "ObjectReference");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "SubSelect");});});});});
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// Expression := ObjectReference
	private State DoParseExpression5Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoParse(_state, results, "ObjectReference");
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// Expression := ObjectReference S (('+' / '-' / '/' / '*') S (Aggregate / Litteral / ObjectReference / SubSelect))*
	private State DoParseExpression6Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "ObjectReference");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 2147483647,
				delegate (State s2, List<Result> r2) {return DoSequence(s2, r2,
					delegate (State s3, List<Result> r3) {return DoChoice(s3, r3,
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, "+");},
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, "-");},
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, "/");},
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, "*");});},
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "S");},
					delegate (State s3, List<Result> r3) {return DoChoice(s3, r3,
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "Aggregate");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "Litteral");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "ObjectReference");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "SubSelect");});});});});
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// Expression := SubSelect
	private State DoParseExpression7Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoParse(_state, results, "SubSelect");
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// Expression := SubSelect S (('+' / '-' / '/' / '*') S (Aggregate / Litteral / ObjectReference / SubSelect))*
	private State DoParseExpression8Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "SubSelect");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 2147483647,
				delegate (State s2, List<Result> r2) {return DoSequence(s2, r2,
					delegate (State s3, List<Result> r3) {return DoChoice(s3, r3,
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, "+");},
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, "-");},
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, "/");},
						delegate (State s4, List<Result> r4) {return DoParseLiteral(s4, r4, "*");});},
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "S");},
					delegate (State s3, List<Result> r3) {return DoChoice(s3, r3,
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "Aggregate");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "Litteral");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "ObjectReference");},
						delegate (State s4, List<Result> r4) {return DoParse(s4, r4, "SubSelect");});});});});
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		
		return _state;
	}
	
	// SelectStatement := S (WildcardReference / Expression) S 'as' S Identifier
	private State DoParseSelectStatement1Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoChoice(s, r,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "WildcardReference");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Expression");});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "as");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Identifier");});
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			value = DoCreateSelectStatement(results);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		else
		{
			string expected = null;
			expected = "SelectStatement";
			if (expected != null)
				_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
		}
		
		return _state;
	}
	
	// SelectStatement := S (WildcardReference / Expression) Space+ Identifier
	private State DoParseSelectStatement2Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoChoice(s, r,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "WildcardReference");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Expression");});},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 1, 2147483647,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Space");});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "Identifier");});
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			value = DoCreateSelectStatement(results);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		else
		{
			string expected = null;
			expected = "SelectStatement";
			if (expected != null)
				_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
		}
		
		return _state;
	}
	
	// SelectStatement := S (WildcardReference / Expression)
	private State DoParseSelectStatement3Rule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoChoice(s, r,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "WildcardReference");},
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "Expression");});});
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			value = DoCreateSelectStatement(results);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		else
		{
			string expected = null;
			expected = "SelectStatement";
			if (expected != null)
				_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
		}
		
		return _state;
	}
	
	// Select := 'select' S ('all' / 'distinct')? SelectStatement? S (',' SelectStatement)*
	private State DoParseSelectRule(State _state, List<Result> _outResults)
	{
		State _start = _state;
		List<Result> results = new List<Result>();
		
		_state = DoSequence(_state, results,
			delegate (State s, List<Result> r) {return DoParseLiteral(s, r, "select");},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 1,
				delegate (State s2, List<Result> r2) {return DoChoice(s2, r2,
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, "all");},
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, "distinct");});});},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 1,
				delegate (State s2, List<Result> r2) {return DoParse(s2, r2, "SelectStatement");});},
			delegate (State s, List<Result> r) {return DoParse(s, r, "S");},
			delegate (State s, List<Result> r) {return DoRepetition(s, r, 0, 2147483647,
				delegate (State s2, List<Result> r2) {return DoSequence(s2, r2,
					delegate (State s3, List<Result> r3) {return DoParseLiteral(s3, r3, ",");},
					delegate (State s3, List<Result> r3) {return DoParse(s3, r3, "SelectStatement");});});});
		
		if (_state.Parsed)
		{
			Expression value = results.Count > 0 ? results[0].Value : default(Expression);
			value = DoCreateSelect(results);
			_outResults.Add(new Result(this, _start.Index, _state.Index - _start.Index, m_input, value));
		}
		else
		{
			string expected = null;
			expected = "ObjectReference";
			if (expected != null)
				_state = new State(_start.Index, false, ErrorSet.Combine(_start.Errors, new ErrorSet(_state.Errors.Index, expected)));
		}
		
		return _state;
	}
	#endregion
	
	#region Private Helper Methods
	partial void OnCtorEpilog();
	partial void OnParseProlog();
	partial void OnParseEpilog(State state);
	
	private Expression DoParseFile(string input, string file)
	{
		m_file = file;
		m_input = m_file;				// we need to ensure that m_file is used or we will (in some cases) get a compiler warning
		m_input = input + "\x0";	// add a sentinel so we can avoid range checks
		m_cache.Clear();
		m_consumed = 0;
		
		State state = new State(0, true);
		List<Result> results = new List<Result>();
		
		OnParseProlog();
		state = DoParse(state, results, "Select");
		
		m_consumed = state.Index;
		OnParseEpilog(state);
		
		return results[0].Value;
	}
	
	public string DoEscapeAll(string s)
	{
		System.Text.StringBuilder builder = new System.Text.StringBuilder(s.Length);
		
		foreach (char ch in s)
		{
			if (ch == '\n')
				builder.Append("\\n");
			
			else if (ch == '\r')
				builder.Append("\\r");
			
			else if (ch == '\t')
				builder.Append("\\t");
			
			else if (ch < ' ')
				builder.AppendFormat("\\x{0:X2}", (int) ch);
			
			else
				builder.Append(ch);
		}
		
		return builder.ToString();
	}
	
	// This is normally only used for error handling so it doesn't need to be too
	// fast. If it somehow does become a bottleneck for some parsers they can
	// replace it with the custom-methods setting.
	private int DoGetLine(int index)
	{
		int line = 1;
		
		int i = 0;
		while (i <= index)
		{
			char ch = m_input[i++];
			
			if (ch == '\r' && m_input[i] == '\n')
			{
				++i;
				++line;
			}
			else if (ch == '\r')
			{
				++line;
			}
			else if (ch == '\n')
			{
				++line;
			}
		}
		
		return line;
	}
	
	private int DoGetCol(int index)
	{
		int start = index;
		
		while (index > 0 && m_input[index - 1] != '\n' && m_input[index - 1] != '\r')
		{
			--index;
		}
		
		return start - index + 1;
	}
	
	private State DoParseLiteral(State state, List<Result> results, string literal)
	{
		int j = state.Index;
		
		for (int i = 0; i < literal.Length; ++i)
		{
			if (char.ToLower(m_input[j + i]) != literal[i])
			{
				return new State(state.Index, false, ErrorSet.Combine(state.Errors, new ErrorSet(state.Index, literal)));
			}
		}
		
		int k = j + literal.Length;
		
		results.Add(new Result(this, j, literal.Length, m_input, default(Expression)));
		state = new State(k, true, state.Errors);
		
		return state;
	}
	
	private State DoParse(State state, List<Result> results, string nonterminal)
	{
		State start = state;
		
		CacheValue cache;
		CacheKey key = new CacheKey(nonterminal, start.Index);
		if (!m_cache.TryGetValue(key, out cache))
		{
			ParseMethod[] methods = m_nonterminals[nonterminal];
			
			int oldCount = results.Count;
			state = DoChoice(state, results, methods);
			
			bool hasResult = state.Parsed && results.Count > oldCount;
			Expression value = hasResult ? results[results.Count - 1].Value : default(Expression);
			cache = new CacheValue(state, value, hasResult);
			m_cache.Add(key, cache);
		}
		else
		{
			if (cache.HasResult)
				results.Add(new Result(this, start.Index, cache.State.Index - start.Index, m_input, cache.Value));
		}
		
		return cache.State;
	}
	
	private State DoChoice(State state, List<Result> results, params ParseMethod[] methods)
	{
		State start = state;
		int startResult = results.Count;
		
		foreach (ParseMethod method in methods)
		{
			State temp = method(state, results);
			if (temp.Parsed)
			{
				state = temp;
				break;
			}
			else
			{
				state = new State(start.Index, false, ErrorSet.Combine(state.Errors, temp.Errors));
				results.RemoveRange(startResult, results.Count - startResult);
			}
		}
		
		return state;
	}
	
	private State DoSequence(State state, List<Result> results, params ParseMethod[] methods)
	{
		State start = state;
		int startResult = results.Count;
		
		foreach (ParseMethod method in methods)
		{
			State temp = method(state, results);
			if (temp.Parsed)
			{
				state = temp;
			}
			else
			{
				state = new State(start.Index, false, ErrorSet.Combine(start.Errors, temp.Errors));
				results.RemoveRange(startResult, results.Count - startResult);
				break;
			}
		}
		
		return state;
	}
	
	private State DoRepetition(State state, List<Result> results, int min, int max, ParseMethod method)
	{
		State start = state;
		
		int count = 0;
		while (count <= max)
		{
			State temp = method(state, results);
			if (temp.Parsed && temp.Index > state.Index)
			{
				state = temp;
				++count;
			}
			else
			{
				state = new State(state.Index, true, ErrorSet.Combine(state.Errors, temp.Errors));
				break;
			}
		}
		
		if (count < min || count > max)
			state = new State(start.Index, false, ErrorSet.Combine(start.Errors, state.Errors));
		
		return state;
	}
	
	private State DoParseRange(State state, List<Result> results, bool inverted, string chars, string ranges, UnicodeCategory[] categories, string label)
	{
		char ch = char.ToLower(m_input[state.Index]);
		
		bool matched = chars.IndexOf(ch) >= 0;
		for (int i = 0; i < ranges.Length && !matched; i += 2)
		{
			matched = ranges[i] <= ch && ch <= ranges[i + 1];
		}
		for (int i = 0; categories != null && i < categories.Length && !matched; ++i)
		{
			matched = char.GetUnicodeCategory(ch) == categories[i];
		}
		
		if (inverted)
			matched = !matched && ch != '\x0';
		
		if (matched)
		{
			results.Add(new Result(this, state.Index, 1, m_input, default(Expression)));
			return new State(state.Index + 1, true, state.Errors);
		}
		
		return new State(state.Index, false, ErrorSet.Combine(state.Errors, new ErrorSet(state.Index, label)));
	}
	
	private State DoNAssert(State state, List<Result> results, ParseMethod method)
	{
		State temp = method(state, results);
		
		state = new State(state.Index, !temp.Parsed, state.Errors);
		
		return state;
	}
	#endregion
	
	#region Private Types
	private struct CacheKey : IEquatable<CacheKey>
	{
		public CacheKey(string rule, int index)
		{
			m_rule = rule;
			m_index = index;
		}
		
		public override bool Equals(object obj)
		{
			if (obj == null)
				return false;
			
			if (GetType() != obj.GetType())
				return false;
			
			CacheKey rhs = (CacheKey) obj;
			return this == rhs;
		}
		
		public bool Equals(CacheKey rhs)
		{
			return this == rhs;
		}
		
		public static bool operator==(CacheKey lhs, CacheKey rhs)
		{
			if (lhs.m_rule != rhs.m_rule)
				return false;
			
			if (lhs.m_index != rhs.m_index)
				return false;
			
			return true;
		}
		
		public static bool operator!=(CacheKey lhs, CacheKey rhs)
		{
			return !(lhs == rhs);
		}
		
		public override int GetHashCode()
		{
			int hash = 0;
			
			unchecked
			{
				hash += m_rule.GetHashCode();
				hash += m_index.GetHashCode();
			}
			
			return hash;
		}
		
		private string m_rule;
		private int m_index;
	}
	
	private struct CacheValue
	{
		public CacheValue(State state, Expression value, bool hasResult)
		{
			State = state;
			Value = value;
			HasResult = hasResult;
		}
		
		public State State;
		
		public Expression Value;
		
		public bool HasResult;
	}
	
	private delegate State ParseMethod(State state, List<Result> results);
	
	// These are either an error that caused parsing to fail or the reason a
	// successful parse stopped.
	private struct ErrorSet
	{
		public ErrorSet(int index, string expected)
		{
			Index = index;
			Expected = new string[]{expected};
		}
		
		public ErrorSet(int index, string[] expected)
		{
			Index = index;
			Expected = expected;
		}
		
		// The location associated with the errors. For a failed parse this will be the
		// same as State.Index. For a successful parse it will be State.Index or later.
		public int Index;
		
		// This will be the name of something which was expected, but not found.
		public string[] Expected;
		
		public static ErrorSet Combine(ErrorSet lhs, ErrorSet rhs)
		{
			if (lhs.Index > rhs.Index)
			{
				return lhs;
			}
			else if (lhs.Index < rhs.Index)
			{
				return rhs;
			}
			else
			{
				List<string> errors = new List<string>(lhs.Expected.Length + rhs.Expected.Length);
				errors.AddRange(lhs.Expected);
				foreach (string err in rhs.Expected)
				{
					if (errors.IndexOf(err) < 0)
						errors.Add(err);
				}
				return new ErrorSet(lhs.Index, errors.ToArray());
			}
		}
		
		public override string ToString()
		{
			if (Expected.Length > 0)
				return string.Format("Expected {0}", string.Join(" or ", Expected));
			else
				return "<none>";
		}
	}
	
	// The state of the parser.
	private struct State
	{
		public State(int index, bool parsed)
		{
			Index = index;
			Parsed = parsed;
			Errors = new ErrorSet(index, new string[0]);
		}
		
		public State(int index, bool parsed, ErrorSet errors)
		{
			Index = index;
			Parsed = parsed;
			Errors = errors;
		}
		
		// Index of the first unconsumed character.
		public int Index;
		
		// True if the expression associated with the state successfully parsed.
		public bool Parsed;
		
		// If Parsed is false then this will explain why. If Parsed is true it will
		// say why the parse stopped.
		public ErrorSet Errors;
	}
	
	// The result of parsing a literal or non-terminal.
	private struct Result
	{
		public Result(sql1 parser, int index, int length, string input, Expression value)
		{
			m_parser = parser;
			m_index = index;
			m_length = length;
			m_input = input;
			Value = value;
		}
		
		// The text which was parsed by the terminal or non-terminal.
		public string Text {get {return m_input.Substring(m_index, m_length);}}
		
		// The 1-based line number the (non)terminal started on.
		public int Line {get {return m_parser.DoGetLine(m_index);}}
		
		// The 1-based column number the (non)terminal started on.
		public int Col {get {return m_parser.DoGetCol(m_index);}}
		
		// For non-terminals this will be the result of the semantic action, 
		// otherwise it will be the default value.
		public Expression Value;
		
		private sql1 m_parser;
		private int m_index;
		private int m_length;
		private string m_input;
	}
	
	#endregion
	
	#region Fields
	private string m_input;
	private string m_file;
	private Dictionary<string, ParseMethod[]> m_nonterminals = new Dictionary<string, ParseMethod[]>();
	private Dictionary<CacheKey, CacheValue> m_cache = new Dictionary<CacheKey, CacheValue>();
	private int m_consumed;
	#endregion
}
